<?xml version="1.0" encoding="UTF-8"?>
<configuration debug="false" scan="true" scanPeriod="30 seconds">
    <!--定义日志文件的存储地址 勿在 LogBack 的配置中使用相对路径 -->
    <contextName>mainSite</contextName>

    <!--应用名-->
    <property scope="context" name="appName" value="mainSite"/>
    <!--表名称-->
    <property scope="context" name="INF_LOG_TABLE_NAME" value="mainSite_inf_logs"/>

    <property scope="context" name="CHARSET" value="utf-8"/>
    <property scope="context" name="LOG_HOME" value="/mainSite/"/>
    <property scope="context" name="SRV_LOG_HOME" value="${LOG_HOME}/${appName}/srv"/>
    <property scope="context" name="APP_LOG_HOME" value="${LOG_HOME}/${appName}/app"/>
    <property scope="context" name="INF_LOG_HOME" value="${LOG_HOME}/${appName}/inf"/>
    <property scope="context" name="ERR_LOG_HOME" value="${LOG_HOME}/${appName}/err"/>

    <!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符 -->
    <property scope="context" name="SRV_PATTERN"
              value='|%d{yyyy-MM-dd HH:mm:ss}|%d{SSS}|%level|%X{uuid}|%replace(%msg){"(\r|\n)","\t"}|"%.-2000ex{full}"%n'/>

    <property scope="context" name="APP_PATTERN"
              value='%d{yyyy-MM-dd HH:mm:ss.SSS}|%X{uuid}|%level|%M|%C\:%L|%thread|%replace(%.-2000msg){"(\r|\n)","\t"}|"%.-2000ex{full}"%n'/>

    <property scope="context" name="INF_PATTERN"
              value='|%replace(%msg){"(\r|\n)","\t"}%n'/>

    <!--<property scope="context" name="INF_PATTERN" value='|%d{yyyy-MM-dd HH:mm:ss}|%d{SSS}|%level|%replace(%msg){"(\r|\n)","\t"}|"%.-2000ex{full}"%n' />-->
    <property scope="context" name="ERR_PATTERN"
              value='%d{yyyy-MM-dd HH:mm:ss.SSS}|%X{uuid}|%level|%M|%C\:%L|%thread|%replace(%msg){"(\r|\n)","\t"}|"%.-2000ex{full}"%n'/>

    <if condition='property("HOSTNAME").contains("lin")'>
        <then>

            <!-- ERROR日志文件 -->
            <appender name="ERR_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <!-- 只记录warn及以上级别的日志 -->
                <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
                    <level>WARN</level>
                </filter>
                <file>${ERR_LOG_HOME}/err.${HOSTNAME}.ing</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <!--日志文件输出的文件名，按天生成文件名 -->
                    <fileNamePattern>${ERR_LOG_HOME}/err.${HOSTNAME}.%d{yyyy-MM-dd}.log.%i.zip</fileNamePattern>
                    <MaxHistory>60</MaxHistory>
                    <!--日志文件保留天数 -->
                    <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <!-- 按时间回滚的同时，按文件大小来回滚 -->
                        <maxFileSize>30MB</maxFileSize>
                    </timeBasedFileNamingAndTriggeringPolicy>
                </rollingPolicy>
                <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                    <charset>${CHARSET}</charset>
                    <pattern>${ERR_PATTERN}</pattern>
                </encoder>
            </appender>

            <!-- 接口日志文件 -->
            <appender name="INF_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${INF_LOG_HOME}/inf.${HOSTNAME}.ing</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <fileNamePattern>${INF_LOG_HOME}/${INF_LOG_TABLE_NAME}.${HOSTNAME}.%d{yyyy-MM-dd_HHmm}.mysql.%i
                    </fileNamePattern>
                    <MaxHistory>1440</MaxHistory>
                    <!--日志文件保存个数 -->
                    <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <!-- 按时间回滚的同时，按文件大小来回滚 -->
                        <maxFileSize>30MB</maxFileSize>
                    </timeBasedFileNamingAndTriggeringPolicy>
                </rollingPolicy>
                <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                    <charset>${CHARSET}</charset>
                    <pattern>${INF_PATTERN}</pattern>
                </encoder>
            </appender>

            <!-- SRV日志文件 -->
            <appender name="SRV_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${SRV_LOG_HOME}/srv.${HOSTNAME}.ing</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <fileNamePattern>${SRV_LOG_HOME}/${SRV_LOG_TABLE_NAME}.${HOSTNAME}.%d{yyyy-MM-dd_HHmm}.log.%i
                    </fileNamePattern>
                    <MaxHistory>1440</MaxHistory>
                    <!--日志文件保存个数 -->
                    <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <!-- 按时间回滚的同时，按文件大小来回滚 -->
                        <maxFileSize>30MB</maxFileSize>
                    </timeBasedFileNamingAndTriggeringPolicy>
                </rollingPolicy>
                <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                    <charset>${CHARSET}</charset>
                    <pattern>${SRV_PATTERN}</pattern>
                </encoder>
            </appender>

            <!-- 开发者日志文件 -->
            <appender name="APP_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
                <file>${APP_LOG_HOME}/app.${HOSTNAME}.ing</file>
                <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
                    <!--日志文件输出的文件名 -->
                    <fileNamePattern>${APP_LOG_HOME}/${APP_LOG_TABLE_NAME}.${HOSTNAME}.%d{yyyy-MM-dd_HH}.log.%i
                    </fileNamePattern>
                    <MaxHistory>168</MaxHistory>
                    <!--日志文件保留个数 -->
                    <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                        <!-- 按时间回滚的同时，按文件大小来回滚 -->
                        <maxFileSize>30MB</maxFileSize>
                    </timeBasedFileNamingAndTriggeringPolicy>
                </rollingPolicy>
                <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                    <charset>${CHARSET}</charset>
                    <pattern>${APP_PATTERN}</pattern>
                </encoder>
            </appender>

            <appender name="ASYNC_INF_FILE" class="ch.qos.logback.classic.AsyncAppender">
                <queueSize>1024</queueSize>
                <discardingThreshold>512</discardingThreshold>
                <includeCallerData>true</includeCallerData>
                <appender-ref ref="INF_FILE"/>
            </appender>

            <appender name="ASYNC_SRV_FILE" class="ch.qos.logback.classic.AsyncAppender">
                <queueSize>1024</queueSize>
                <discardingThreshold>512</discardingThreshold>
                <includeCallerData>true</includeCallerData>
                <appender-ref ref="SRV_FILE"/>
            </appender>

            <appender name="ASYNC_APP_FILE" class="ch.qos.logback.classic.AsyncAppender">
                <queueSize>1024</queueSize>
                <discardingThreshold>512</discardingThreshold>
                <includeCallerData>true</includeCallerData>
                <appender-ref ref="APP_FILE"/>
            </appender>

            <appender name="ASYNC_ERR_FILE" class="ch.qos.logback.classic.AsyncAppender">
                <queueSize>1024</queueSize>
                <discardingThreshold>512</discardingThreshold>
                <includeCallerData>true</includeCallerData>
                <appender-ref ref="ERR_FILE"/>
            </appender>


            <!-- 线上环境的配置，根据日志规范约定输出 -->
            <root level="WARN">
                <appender-ref ref="ASYNC_ERR_FILE"/>
            </root>
            <logger name="intf" level="INFO">
                <appender-ref ref="ASYNC_INF_FILE"/>
            </logger>

            <logger name="srv" level="INFO" additivity="false">
                <appender-ref ref="ASYNC_SRV_FILE"/>
            </logger>
            <logger name="com.mainSite" level="WARN">
                <appender-ref ref="ASYNC_APP_FILE"/>
            </logger>

            <!--可根据业务需要自定义增加修改-->
        </then>
        <else>

            <!-- 控制台输出 -->
            <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
                <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
                    <charset>${CHARSET}</charset>
                    <pattern>${INF_PATTERN}</pattern>
                </encoder>
            </appender>

            <!-- 自测环境的配置，全部输出到控制台 -->
            <root level="WARN">
                <appender-ref ref="STDOUT"/>
            </root>
            <logger name="intf" level="INFO"/>
            <logger name="intflog" level="INFO"/>
            <logger name="srv" level="INFO"/>
            <logger name="com.mainSite" level="WARN"/>
            <logger name="org.springframework" level="WARN"/>
            <logger name="org.apache" level="WARN"/>
            <!--myibatis log configure -->
            <!-- <logger name="com.apache.ibatis" level="TRACE" /> -->
            <!-- <logger name="java.sql.Connection" level="DEBUG" /> -->
            <!-- <logger name="java.sql.Statement" level="DEBUG" /> -->
            <!-- <logger name="java.sql.PreparedStatement" level="DEBUG" /> -->
        </else>
    </if>

</configuration>