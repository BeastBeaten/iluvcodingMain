{
  "name": "grunt-angular-modularize",
  "description": "Easily convert angular.modules to be AMD/CommonJS-compatible",
  "version": "0.1.0",
  "homepage": "https://github.com/ericclemmons/grunt-angular-modularize",
  "author": {
    "name": "Eric Clemmons",
    "email": "eric@smarterspam.com",
    "url": "http://ericclemmons.com/"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ericclemmons/grunt-angular-modularize.git"
  },
  "bugs": {
    "url": "https://github.com/ericclemmons/grunt-angular-modularize/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ericclemmons/grunt-angular-modularize/blob/master/LICENSE-MIT"
    }
  ],
  "main": "Gruntfile.js",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "test": "./node_modules/.bin/grunt test"
  },
  "devDependencies": {
    "browserify": "~3.20.0",
    "grunt": "~0.4.1",
    "grunt-cli": "~0.1.11",
    "grunt-browserify": "~1.3.0",
    "grunt-contrib-jshint": "~0.8.0",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-nodeunit": "~0.2.0",
    "grunt-contrib-requirejs": "~0.4.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.1"
  },
  "keywords": [
    "gruntplugin",
    "angular",
    "requirejs",
    "amd",
    "browserify",
    "commonjs",
    "concat"
  ],
  "dependencies": {},
  "readme": "# grunt-angular-modularize\n\n[![Build Status](https://travis-ci.org/ericclemmons/grunt-angular-modularize.png)](https://travis-ci.org/ericclemmons/grunt-angular-modularize)\n[![Dependencies](https://david-dm.org/ericclemmons/grunt-angular-modularize.png)](https://david-dm.org/ericclemmons/grunt-angular-modularize)\n[![devDependencies](https://david-dm.org/ericclemmons/grunt-angular-modularize/dev-status.png)](https://david-dm.org/ericclemmons/grunt-angular-modularize#info=devDependencies&view=table)\n\n> Write AngularJS Modules Once.\n> Build with [RequireJS][4] (AMD),\n> [Browserify][5] (CommonJS),\n> or simply [concat][3].\n\nUsing a [Simple Example](https://github.com/ericclemmons/grunt-angular-modularize/tree/master/examples/simple)\nas the input:\n\n- [Simple RequireJS (AMD) Demo](https://rawgithub.com/ericclemmons/grunt-angular-modularize/master/examples/simple/amd.html)\n- [Simple RequireJS (AMD) Output](https://github.com/ericclemmons/grunt-angular-modularize/tree/master/test/simple/amd/app)\n- [Simple Browserify (CommonJS) Demo](https://rawgithub.com/ericclemmons/grunt-angular-modularize/master/examples/simple/cjs.html)\n- [Simple RequireJS (CommonJS) Output](https://github.com/ericclemmons/grunt-angular-modularize/tree/master/test/simple/cjs/app)\n\n*These demos may need to be refreshed upon loading.*\n\n\n## Table of Contents\n\n- [Installation](#installation)\n- [Usage](#usage)\n- [Examples](#examples)\n- [Options](#options)\n- [Changelog](#changelog)\n- [License](#license)\n\n\n## Installation\n\n*This plugin requires [Grunt][1] `~0.4.1`*\n\nInstall the plugin:\n\n```shell\n$ npm install grunt-angular-modularize --save-dev\n```\n\nEnable the plugin within your `Gruntfile.js`\n\n```js\ngrunt.loadNpmTasks('grunt-angular-modularize');\n```\n\n\n## Usage\n\n\n### 1. Properly structure your AngularJS app\n\n- Each file should be it's own standalone module:\n\n```js\nangular\n  .module('admin.controllers.home')\n  .controller('HomeController', [\n    '$scope',\n    function($scope) {\n      ...\n    }\n  ])\n;\n```\n\n- The module name should be able to map to the folder it's in.\n(e.g. `admin.controllers.home` may reside in `public/scripts/admin/controllers/home.js`)\n- Each file should only require modules that it needs.\n- You should use a unique namespace to describe your app to make it easier to separate sections. (e.g. `admin` instead of `app`).\n- The root of each section (e.g. `admin.js`) should live within a folder of that namespace and not outside of it.\n(e.g. `path/to/src/admin/admin.js` alongside `path/to/src/admin/controllers/home.js`)\n\n\n### 2. Modify `Gruntfile.js`\n\n*See the [options](#options) below for detailed usage for each option**.\n\n```js\nngmodularize: {\n  admin: {\n    options: {\n      format:   'amd',                    // Can be `cjs` for CommonJS\n      requires: ['admin'],                // Used for RequireJS's `main` file...\n      paths:    {                         //\n        admin:  'admin'                   //\n      }                                   //\n    },\n    src:        'path/to/src/admin.js',   // admin entry-point\n    dest:       'path/to/build/admin.js'  // AMD-version of admin entry-point\n  }\n}\n```\n\n\n### 3. Run `grunt ngmodularize`\n\n```shell\n$ grunt ngmodularize\n```\n\nThis will automatically traverse the entry-point specified in `src` for all\ndependencies with a known path (via `paths`) and write out the corresponding\nstructure alongside the `dest` file.\n\n\n### 4. Building & Optimization\n\nIf you're using [grunt-contrib-requirejs][4] (AMD) or [grunt-browserify][5] (CommonJS),\ntheir tasks are automatically configured for you!\n\nSimply run the appropriate command:\n\n```shell\n$ grunt ngmodularize requirejs\n```\nor\n```shell\n$ grunt ngmodularize browserify\n```\n\nCouple this with [grunt-angular-templates][6], and your entire application\ncan be reduced to one or two HTTP requests!\n\n\n## Examples\n\n### Concatenation\n\n- Uses [grunt-contrib-concat][3].\n- Easy to setup.\n- Only reference build file, not hundreds of individual files.\n- Stack trace line numbers don't match source.\n- Does not require this plugin.\n\nWith a properly structured app (one module per file), AngularJS's DI\nhandles dependency ordering for you.\n\nSimply add the following to your `Gruntfile.js`:\n\n```js\nconcat: {\n  admin: {\n    src:  'path/to/src/admin/**/*.js',\n    dest: 'path/to/build/admin/admin.build.js'\n  }\n},\n```\n\nNow, your `index.html` only has to reference one script from now on:\n\n```html\n<script src=\"path/to/build/admin/admin.build.js\"></script>\n```\n\nCouple the `concat` task or a `<script>` tag with [grunt-angular-templates][6],\nand avoid HTTP requests for your templates.\n\n\n### RequireJS (AMD)\n\n- Uses [grunt-contrib-requirejs][4].\n- Fairly easy to setup.\n- Client-side lazy loading of modules.\n- Stack trace line numbers matches source.\n\nSimply add the following to your `Gruntfile.js`:\n\n```js\nngmodularize: {\n  admin: {\n    options: {\n      format:   'amd',\n      requires: ['admin/admin'],  // Entry-point: `path/to/src/admin/admin.js`\n      paths: {\n        admin:  '../admin'        // Namespace path: `path/to/src/admin/*`\n      }\n    },\n    src:        'path/to/src/admin/admin.js',\n    dest:       'path/to/build/admin/admin.js'\n  }\n}\n```\n\nNow your modules will look like:\n\n```js\ndefine([...], function() {\n\n  ...\n\n});\n```\n\nAdditionally, alongside your `admin/admin.js`, there will be a RequireJS\n`admin/main.js`, which is automatically configured for AngularJS to work\nwith RequireJS!\n\nAdd the following to your `index.html`:\n\n```html\n<script data-main=\"path/to/build/admin/main.js\" src=\"path/to/bower_components/requirejs/require.min.js\"></script>\n```\n\nLater, when you optimize with `$ grunt ngmodularize requirejs`, your HTML can then have:\n\n```html\n<script data-main=\"path/to/build/admin/main.dist.js\" src=\"path/to/bower_components/requirejs/require.min.js\"></script>\n```\n\nNotice the `.dist.js` extension?  This is automatically configured in the `requirejs`\ntarget for you!\n\n\n### Browserify (CommonJS)\n\n- Uses [grunt-browserify][5].\n- Fairly easy to setup.\n- Requires running `$ grunt browserify` to run in the client.\n- Allows usage of NodeJS/CommonJS/NPM packages within application.\n\nSimply add the following to your `Gruntfile.js`:\n\n```js\nngmodularize: {\n  admin: {\n    options: {\n      format:   'cjs',\n      paths: {\n        admin:  '../admin' // Root path when generating other `require(...)`s\n      }\n    },\n    src:        'path/to/src/admin/admin.js',\n    dest:       'path/to/build/admin/admin.js'\n  },\n}\n```\n\nNow, you only need the following in your `index.html`:\n\n```html\n<script src=\"path/to/build/admin/admin.js\"></script>\n```\n\nLater, when you optimize with `$ grunt ngmodularize browserify`,\nyour HTML can then have:\n\n```html\n<script src=\"path/to/build/admin/admin.dist.js\"></script>\n```\n\nAgain, the configuration of the `browserify` task has been handled for you\nto create a `.dist.js` version.\n\n\n## Options\n\n*See the [Examples](#examples) for actual use-cases*.\n\n\n### format\n\n> Module format to convert to\n\n- `amd`: RequireJS (AMD)\n- `cjs`: Browserify (CommonJS)\n\n\n### paths\n\n> Namespaces & their corresponding paths, **relative to the entry-point**\n\n```js\npaths: {\n  'admin.controllers':  '../admin/ctrls',\n  'admin':              '../admin'\n}\n```\n\nIn this example, the module `admin` would expect to be found at `admin/admin.js`,\nwhile `admin.controllers.home` would be found at `admin/ctrls/home.js`.\n\n**Whichever namespace matches the module first wins**.\n\nIn the event you don't have an explicit folder for your application\n(e.g. everything lives in `/scripts`), then you can use the following:\n\n```js\npaths: {\n  'admin':  '.'\n}\n```\n\nIn this example, the `admin` modules would be found in `scripts/admin.js`,\nwhile `admin.controllers.home` would be found in `scripts/controllers.home`.\n\nBy specifying the root of the `admin` namespace as the current folder (`.`),\nthe namespace has been effectively nullified.\n\n\n### requires\n\n> Array of RequireJS paths to require.\n\nYou usually only need to put in the web-accessible relative path to the\nentry-point of your application.\n\n\n## Changelog\n\n- v0.1.0 â€“ Initial release\n\n## License\n\nCopyright (c) 2014 Eric Clemmons Licensed under the MIT license.\n\n\n[1]: http://gruntjs.com/\n[2]: https://github.com/ericclemmons/grunt-angular-modularize/tree/master/examples\n[3]: https://github.com/gruntjs/grunt-contrib-concat\n[4]: https://github.com/gruntjs/grunt-contrib-requirejs\n[5]: https://github.com/jmreidy/grunt-browserify\n[6]: https://github.com/ericclemmons/grunt-angular-templates\n",
  "readmeFilename": "README.md",
  "_id": "grunt-angular-modularize@0.1.0",
  "dist": {
    "shasum": "0a2a03bb867bb787a5c1ed622bec19b417f52eab",
    "tarball": "http://registry.npmjs.org/grunt-angular-modularize/-/grunt-angular-modularize-0.1.0.tgz"
  },
  "_from": "grunt-angular-modularize@0.1.0",
  "_npmVersion": "1.2.32",
  "_npmUser": {
    "name": "ericclemmons",
    "email": "eric@smarterspam.com"
  },
  "maintainers": [
    {
      "name": "ericclemmons",
      "email": "eric@smarterspam.com"
    }
  ],
  "directories": {},
  "_shasum": "0a2a03bb867bb787a5c1ed622bec19b417f52eab",
  "_resolved": "https://registry.npmjs.org/grunt-angular-modularize/-/grunt-angular-modularize-0.1.0.tgz"
}
